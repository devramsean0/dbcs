{"version":3,"file":"index.js","sources":["../src/lib/builders/MessageBuilder.ts","../src/lib/type-guards.ts","../src/lib/MessagePrompter/strategies/MessagePrompterBaseStrategy.ts","../src/lib/MessagePrompter/strategies/MessagePrompterConfirmStrategy.ts","../src/lib/MessagePrompter/strategies/MessagePrompterMessageStrategy.ts","../src/lib/MessagePrompter/strategies/MessagePrompterNumberStrategy.ts","../src/lib/MessagePrompter/strategies/MessagePrompterReactionStrategy.ts","../src/lib/MessagePrompter/MessagePrompter.ts","../src/lib/PaginatedMessages/PaginatedMessage.ts","../src/lib/PaginatedMessages/LazyPaginatedMessage.ts","../src/lib/PaginatedMessages/PaginatedFieldMessageEmbed.ts","../src/lib/utilities.ts"],"sourcesContent":["import type { MessageOptions } from 'discord.js';\n\nexport type MessageBuilderFileResolvable = NonNullable<MessageOptions['files']>[number];\nexport type MessageBuilderResolvable = Omit<MessageOptions, 'embed' | 'disableMentions' | 'reply'> & { embeds?: MessageOptions['embeds'] };\n\n/**\n * A message builder class, it implements the {@link MessageOptions} interface.\n */\nexport class MessageBuilder implements MessageOptions {\n\t/**\n\t * Whether or not the message should be spoken aloud.\n\t * @default false\n\t */\n\tpublic tts?: MessageOptions['tts'];\n\n\t/**\n\t * The nonce for the message.\n\t * @default ''\n\t */\n\tpublic nonce?: MessageOptions['nonce'];\n\n\t/**\n\t * The content for the message. If set to undefined and the builder is used to edit, the content will not be\n\t * replaced.\n\t */\n\tpublic content?: MessageOptions['content'];\n\n\t/**\n\t * The embeds for the message. If set to undefined and the builder is used to edit, the embed will not be replaced.\n\t * @remark There is a maximum of 10 embeds in 1 message\n\t */\n\tpublic embeds?: MessageOptions['embeds'];\n\n\t/**\n\t * Which mentions should be parsed from the message content.\n\t */\n\tpublic allowedMentions?: MessageOptions['allowedMentions'];\n\n\t/**\n\t * Files to send with the message. This should not be set when editing a message, as Discord does not support\n\t * editing file attachments.\n\t */\n\tpublic files?: MessageOptions['files'];\n\n\tpublic constructor(options?: MessageBuilderResolvable) {\n\t\tthis.tts = options?.tts ?? MessageBuilder.defaults.tts;\n\t\tthis.nonce = options?.nonce ?? MessageBuilder.defaults.nonce;\n\t\tthis.content = options?.content ?? MessageBuilder.defaults.content;\n\t\tthis.embeds = options?.embeds ?? MessageBuilder.defaults.embeds;\n\t\tthis.allowedMentions = options?.allowedMentions ?? MessageBuilder.defaults.allowedMentions;\n\t\tthis.files = options?.files ?? MessageBuilder.defaults.files;\n\t}\n\n\t/**\n\t * Sets the value for the {@link MessageBuilder.tts} field.\n\t * @param tts Whether or not the message should be spoken aloud.\n\t */\n\tpublic setTTS(tts?: boolean): this {\n\t\tthis.tts = tts;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the value for the {@link MessageBuilder.nonce} field.\n\t * @param nonce The nonce for the message.\n\t */\n\tpublic setNonce(nonce?: string): this {\n\t\tthis.nonce = nonce;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the value for the {@link MessageBuilder.content} field.\n\t * @param content The content for the message. If set to undefined and the builder is used to edit, the content will\n\t * not be replaced.\n\t */\n\tpublic setContent(content?: string): this {\n\t\tthis.content = content;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the value for the {@link MessageBuilder.embed} field.\n\t * @param embeds The embeds for the message. If set to undefined and the builder is used to edit, the embed will not be\n\t * replaced. There is a maximum of 10 embeds per message\n\t * @remark When providing more than 10 embeds, the array will automatically be sliced down to the first 10.\n\t */\n\tpublic setEmbeds(embeds?: MessageOptions['embeds']): this {\n\t\t// Ensure no more than 10 embeds are ever set\n\t\tif (embeds && embeds.length > 10) {\n\t\t\tembeds = embeds.slice(0, 10);\n\t\t}\n\n\t\tthis.embeds = embeds;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the value for the {@link MessageBuilder.allowedMentions} field.\n\t * @param allowedMentions Which mentions should be parsed from the message content.\n\t */\n\tpublic setAllowedMentions(allowedMentions?: MessageOptions['allowedMentions']): this {\n\t\tthis.allowedMentions = allowedMentions;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a new value for the {@link MessageBuilder.files} field array.\n\t * @param file The file to add to the {@link MessageBuilder.files} field array.\n\t */\n\tpublic addFile(file: MessageBuilderFileResolvable): this {\n\t\tthis.files = this.files?.concat(file) ?? [file];\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets a single value for the {@link MessageBuilder.files} field array.\n\t * @param file The file to send with the message. This should not be set when editing a message, as Discord does not\n\t * support editing file attachments.\n\t */\n\tpublic setFile(file: MessageBuilderFileResolvable): this {\n\t\tthis.files = [file];\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the value for the {@link MessageBuilder.files} field.\n\t * @param files The files to send with the message. This should not be set when editing a message, as Discord does\n\t * not support editing file attachments.\n\t */\n\tpublic setFiles(files?: MessageBuilderFileResolvable[]): this {\n\t\tthis.files = files;\n\t\treturn this;\n\t}\n\n\t/**\n\t * The default values for all MessageBuilder instances.\n\t */\n\tpublic static defaults: MessageBuilderResolvable = {};\n}\n","import type {\n\tCategoryChannel,\n\tChannel,\n\tDMChannel,\n\tNewsChannel,\n\tPartialDMChannel,\n\tPartialGroupDMChannel,\n\tStageChannel,\n\tStoreChannel,\n\tTextChannel,\n\tThreadChannel,\n\tVoiceChannel\n} from 'discord.js';\nimport type { ChannelTypes, GuildTextBasedChannelTypes, NonThreadGuildTextBasedChannelTypes, TextBasedChannelTypes } from './utility-types';\nimport { Nullish, isNullish } from '@sapphire/utilities';\n\n/**\n * Checks whether a given channel is a {@link CategoryChannel}\n * @param channel The channel to check\n */\nexport function isCategoryChannel(channel: ChannelTypes | Nullish): channel is CategoryChannel {\n\treturn channel?.type === 'GUILD_CATEGORY';\n}\n\n/**\n * Checks whether a given channel is a {@link DMChannel}\n * @param channel The channel to check\n */\nexport function isDMChannel(channel: ChannelTypes | Nullish): channel is DMChannel | PartialDMChannel {\n\treturn channel?.type === 'DM';\n}\n\n/**\n * Checks whether a given channel is a {@link PartialGroupDMChannel}\n * @param channel The channel to check\n */\nexport function isGroupChannel(channel: Channel | PartialDMChannel | Nullish): channel is PartialGroupDMChannel {\n\treturn channel?.type === 'GROUP_DM';\n}\n\n/**\n * Checks if a channel comes from a guild.\n * @param channel The channel to check\n * @returns Whether or not the channel is guild-based.\n */\nexport function isGuildBasedChannel(channel: ChannelTypes | Nullish): channel is GuildTextBasedChannelTypes {\n\treturn channel?.type !== 'DM';\n}\n\n/**\n * Checks whether or not a channel comes from a guild.\n * @remark As opposed to {@link isGuildBasedChannel} this checks if there is `guild` property on the channel.\n * @param channel The channel to check.\n * @returns Whether or not the channel is guild-based.\n */\nexport function isGuildBasedChannelByGuildKey(channel: ChannelTypes | Nullish): channel is GuildTextBasedChannelTypes {\n\treturn Reflect.has(channel ?? {}, 'guild');\n}\n\n/**\n * Checks whether a given channel is a {@link NewsChannel}.\n * @param channel The channel to check.\n */\nexport function isNewsChannel(channel: ChannelTypes | Nullish): channel is NewsChannel {\n\treturn channel?.type === 'GUILD_NEWS';\n}\n\n/**\n * Checks whether a given channel is a {@link StoreChannel}\n * @param channel The channel to check\n */\nexport function isStoreChannel(channel: ChannelTypes | Nullish): channel is StoreChannel {\n\treturn channel?.type === 'GUILD_STORE';\n}\n\n/**\n * Checks whether a given channel is a {@link TextChannel}.\n * @param channel The channel to check.\n */\nexport function isTextChannel(channel: ChannelTypes | Nullish): channel is TextChannel {\n\treturn channel?.type === 'GUILD_TEXT';\n}\n\n/**\n * Checks whether a given channel is a {@link VoiceChannel}\n * @param channel The channel to check\n */\nexport function isVoiceChannel(channel: ChannelTypes | Nullish): channel is VoiceChannel {\n\treturn channel?.type === 'GUILD_VOICE';\n}\n\n/**\n * Checks whether a given channel is a {@link StageChannel}\n * @param channel The channel to check\n */\nexport function isStageChannel(channel: ChannelTypes | Nullish): channel is StageChannel {\n\treturn channel?.type === 'GUILD_STAGE_VOICE';\n}\n\n/**\n * Checks whether a given channel is a {@link ThreadChannel}\n * @param channel The channel to check.\n */\nexport function isThreadChannel(channel: ChannelTypes | Nullish): channel is ThreadChannel {\n\treturn channel?.isThread() ?? false;\n}\n\n/**\n * Checks whether a given channel is a News {@link ThreadChannel}\n * @param channel The channel to check.\n */\nexport function isNewsThreadChannel(channel: ChannelTypes | Nullish): channel is ThreadChannel {\n\treturn channel?.type === 'GUILD_NEWS_THREAD';\n}\n\n/**\n * Checks whether a given channel is a Public {@link ThreadChannel}\n * @param channel The channel to check.\n */\nexport function isPublicThreadChannel(channel: ChannelTypes | Nullish): channel is ThreadChannel {\n\treturn channel?.type === 'GUILD_PUBLIC_THREAD';\n}\n\n/**\n * Checks whether a given channel is a Private {@link ThreadChannel}\n * @param channel The channel to check.\n */\nexport function isPrivateThreadChannel(channel: ChannelTypes | Nullish): channel is ThreadChannel {\n\treturn channel?.type === 'GUILD_PRIVATE_THREAD';\n}\n\n/**\n * Checks whether a given channel is a {@link TextBasedChannelTypes}. This means it has a `send` method.\n * @param channel The channel to check.\n */\nexport function isTextBasedChannel(channel: ChannelTypes | Nullish): channel is TextBasedChannelTypes {\n\tif (isNullish(channel)) return false;\n\n\treturn !isNullish((channel as TextBasedChannelTypes).send);\n}\n\n/**\n * Checks whether a given channel allows NSFW content or not\n * @param channel The channel to check.\n */\nexport function isNsfwChannel(channel: ChannelTypes | Nullish): boolean {\n\tif (isNullish(channel)) return false;\n\n\tswitch (channel.type) {\n\t\tcase 'DM':\n\t\tcase 'GROUP_DM':\n\t\tcase 'GUILD_CATEGORY':\n\t\tcase 'GUILD_STAGE_VOICE':\n\t\tcase 'GUILD_STORE':\n\t\tcase 'GUILD_VOICE':\n\t\tcase 'UNKNOWN':\n\t\t\treturn false;\n\t\tcase 'GUILD_NEWS':\n\t\tcase 'GUILD_TEXT':\n\t\t\treturn (channel as NonThreadGuildTextBasedChannelTypes).nsfw;\n\t\tcase 'GUILD_NEWS_THREAD':\n\t\tcase 'GUILD_PRIVATE_THREAD':\n\t\tcase 'GUILD_PUBLIC_THREAD':\n\t\t\treturn Boolean((channel as ThreadChannel).parent?.nsfw);\n\t}\n}\n","import { Awaited, isNullish } from '@sapphire/utilities';\nimport type { CollectorFilter, CollectorOptions, EmojiIdentifierResolvable, Message, MessageReaction, User } from 'discord.js';\nimport { isTextBasedChannel } from '../../type-guards';\nimport type { MessagePrompterChannelTypes, MessagePrompterMessage } from '../constants';\nimport type { IMessagePrompterExplicitReturnBase } from '../ExplicitReturnTypes';\nimport type { IMessagePrompterStrategyOptions } from '../strategyOptions';\n\nexport abstract class MessagePrompterBaseStrategy {\n\t/**\n\t * The type of strategy that was used\n\t */\n\tpublic type: string;\n\n\t/**\n\t * The timeout that was used in the collector\n\t */\n\tpublic timeout: number;\n\n\t/**\n\t * Whether to return an explicit object with data, or the strategies' default\n\t */\n\tpublic explicitReturn: boolean;\n\n\t/**\n\t * The message that has been sent in {@link MessagePrompter.run}\n\t */\n\tpublic appliedMessage: Message | null = null;\n\n\t/**\n\t * The message that will be sent in {@link MessagePrompter.run}\n\t */\n\tpublic message: MessagePrompterMessage;\n\n\t/**\n\t * The message the bot will edit to send its prompt in {@link MessagePrompter.run}\n\t */\n\tpublic editMessage: Message | undefined;\n\n\t/**\n\t * Constructor for the {@link MessagePrompterBaseStrategy} class\n\t * @param messagePrompter The used instance of {@link MessagePrompter}\n\t * @param options Overrideable options if needed.\n\t */\n\tpublic constructor(type: string, message: MessagePrompterMessage, options?: IMessagePrompterStrategyOptions) {\n\t\tthis.type = type;\n\t\tthis.timeout = options?.timeout ?? MessagePrompterBaseStrategy.defaultStrategyOptions.timeout ?? 10 * 1000;\n\t\tthis.explicitReturn = options?.explicitReturn ?? MessagePrompterBaseStrategy.defaultStrategyOptions.explicitReturn ?? false;\n\t\tthis.editMessage = options?.editMessage ?? MessagePrompterBaseStrategy.defaultStrategyOptions.editMessage ?? undefined;\n\t\tthis.message = message;\n\t}\n\n\tpublic abstract run(channel: MessagePrompterChannelTypes, authorOrFilter: User | CollectorFilter<unknown[]>): Awaited<unknown>;\n\n\tprotected async collectReactions(\n\t\tchannel: MessagePrompterChannelTypes,\n\t\tauthorOrFilter: User | CollectorFilter<[MessageReaction, User]>,\n\t\treactions: string[] | EmojiIdentifierResolvable[]\n\t): Promise<IMessagePrompterExplicitReturnBase> {\n\t\tif (isTextBasedChannel(channel)) {\n\t\t\tif (!isNullish(this.editMessage) && this.editMessage.editable) {\n\t\t\t\tthis.appliedMessage = await this.editMessage.edit(this.message);\n\t\t\t} else {\n\t\t\t\tthis.appliedMessage = await channel.send(this.message);\n\t\t\t}\n\n\t\t\tconst collector = this.appliedMessage.createReactionCollector({\n\t\t\t\t...this.createReactionPromptFilter(reactions, authorOrFilter),\n\t\t\t\tmax: 1,\n\t\t\t\ttime: this.timeout\n\t\t\t});\n\n\t\t\tlet resolved = false;\n\t\t\tconst collected: Promise<MessageReaction> = new Promise<MessageReaction>((resolve, reject) => {\n\t\t\t\tcollector.on('collect', (r) => {\n\t\t\t\t\tresolve(r);\n\t\t\t\t\tresolved = true;\n\t\t\t\t\tcollector.stop();\n\t\t\t\t});\n\n\t\t\t\tcollector.on('end', (collected) => {\n\t\t\t\t\tresolved = true;\n\t\t\t\t\tif (!collected.size) reject(new Error('Collector has ended'));\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tfor (const reaction of reactions) {\n\t\t\t\tif (resolved) break;\n\n\t\t\t\tawait this.appliedMessage.react(reaction);\n\t\t\t}\n\n\t\t\tconst firstReaction = await collected;\n\t\t\tconst emoji = firstReaction?.emoji;\n\n\t\t\tconst reaction = reactions.find((r) => (emoji?.id ?? emoji?.name) === r);\n\n\t\t\treturn {\n\t\t\t\temoji,\n\t\t\t\treaction,\n\t\t\t\tstrategy: this,\n\t\t\t\tappliedMessage: this.appliedMessage,\n\t\t\t\tmessage: this.message\n\t\t\t};\n\t\t}\n\n\t\tthrow new Error('A channel was provided to which I am not able to send messages');\n\t}\n\n\t/**\n\t * Creates a filter for the collector to filter on\n\t * @return The filter for awaitReactions function\n\t */\n\tprotected createReactionPromptFilter(\n\t\treactions: string[] | EmojiIdentifierResolvable[],\n\t\tauthorOrFilter: User | CollectorFilter<[MessageReaction, User]>\n\t): CollectorOptions<[MessageReaction, User]> {\n\t\treturn {\n\t\t\tfilter: async (reaction: MessageReaction, user: User) =>\n\t\t\t\treactions.includes(reaction.emoji.id ?? reaction.emoji.name ?? '') &&\n\t\t\t\t(typeof authorOrFilter === 'function' ? await authorOrFilter(reaction, user) : user.id === authorOrFilter.id) &&\n\t\t\t\t!user.bot\n\t\t};\n\t}\n\n\t/**\n\t * The default strategy options\n\t */\n\tpublic static defaultStrategyOptions: IMessagePrompterStrategyOptions = {\n\t\ttimeout: 10 * 1000,\n\t\texplicitReturn: false,\n\t\teditMessage: undefined\n\t};\n}\n","import type { CollectorFilter, EmojiResolvable, MessageReaction, User } from 'discord.js';\nimport type { MessagePrompterChannelTypes, MessagePrompterMessage } from '../constants';\nimport type { IMessagePrompterExplicitConfirmReturn } from '../ExplicitReturnTypes';\nimport type { IMessagePrompterConfirmStrategyOptions } from '../strategyOptions';\nimport { MessagePrompterBaseStrategy } from './MessagePrompterBaseStrategy';\n\nexport class MessagePrompterConfirmStrategy extends MessagePrompterBaseStrategy implements IMessagePrompterConfirmStrategyOptions {\n\t/**\n\t * The confirm emoji used\n\t */\n\tpublic confirmEmoji: string | EmojiResolvable;\n\n\t/**\n\t * The cancel emoji used\n\t */\n\tpublic cancelEmoji: string | EmojiResolvable;\n\n\t/**\n\t * Constructor for the {@link MessagePrompterBaseStrategy} class\n\t * @param message The message to be sent {@link MessagePrompter}\n\t * @param options Overrideable options if needed.\n\t */\n\tpublic constructor(message: MessagePrompterMessage, options?: IMessagePrompterConfirmStrategyOptions) {\n\t\tsuper('confirm', message, options);\n\n\t\tthis.confirmEmoji = options?.confirmEmoji ?? MessagePrompterConfirmStrategy.confirmEmoji;\n\t\tthis.cancelEmoji = options?.cancelEmoji ?? MessagePrompterConfirmStrategy.cancelEmoji;\n\t}\n\n\t/**\n\t * This executes the {@link MessagePrompter} and sends the message if {@link IMessagePrompterOptions.type} equals confirm.\n\t * The handler will wait for one (1) reaction.\n\t * @param channel The channel to use.\n\t * @param authorOrFilter An author object to validate or a {@linkplain https://discord.js.org/#/docs/main/stable/typedef/CollectorFilter CollectorFilter} predicate callback.\n\t * @returns A promise that resolves to a boolean denoting the value of the input (`true` for yes, `false` for no).\n\t */\n\tpublic override async run(\n\t\tchannel: MessagePrompterChannelTypes,\n\t\tauthorOrFilter: User | CollectorFilter<[MessageReaction, User]>\n\t): Promise<IMessagePrompterExplicitConfirmReturn | boolean> {\n\t\tconst response = await this.collectReactions(channel, authorOrFilter, [this.confirmEmoji, this.cancelEmoji]);\n\n\t\tconst confirmed = (response?.emoji?.id ?? response?.emoji?.name) === this.confirmEmoji;\n\n\t\t// prettier-ignore\n\t\treturn this.explicitReturn ? { ...response, confirmed } : confirmed;\n\t}\n\n\t/**\n\t * The default confirm emoji used for {@link MessagePrompterConfirmStrategy}\n\t */\n\tpublic static confirmEmoji: string | EmojiResolvable = '🇾';\n\n\t/**\n\t * The default cancel emoji used for {@link MessagePrompterConfirmStrategy}\n\t */\n\tpublic static cancelEmoji: string | EmojiResolvable = '🇳';\n}\n","import { isNullish } from '@sapphire/utilities';\nimport type { CollectorFilter, CollectorOptions, Message, User } from 'discord.js';\nimport { isTextBasedChannel } from '../../type-guards';\nimport type { MessagePrompterChannelTypes, MessagePrompterMessage } from '../constants';\nimport type { IMessagePrompterExplicitMessageReturn } from '../ExplicitReturnTypes';\nimport type { IMessagePrompterStrategyOptions } from '../strategyOptions';\nimport { MessagePrompterBaseStrategy } from './MessagePrompterBaseStrategy';\n\nexport class MessagePrompterMessageStrategy extends MessagePrompterBaseStrategy implements IMessagePrompterStrategyOptions {\n\t/**\n\t * Constructor for the {@link MessagePrompterBaseStrategy} class\n\t * @param messagePrompter The used instance of {@link MessagePrompter}\n\t * @param options Overrideable options if needed.\n\t */\n\tpublic constructor(message: MessagePrompterMessage, options: IMessagePrompterStrategyOptions) {\n\t\tsuper('message', message, options);\n\t}\n\n\t/**\n\t * This executes the {@link MessagePrompter} and sends the message if {@link IMessagePrompterOptions.type} equals message.\n\t * The handler will wait for one (1) message.\n\t * @param channel The channel to use.\n\t * @param authorOrFilter An author object to validate or a {@linkplain https://discord.js.org/#/docs/main/stable/typedef/CollectorFilter CollectorFilter} predicate callback.\n\t * @returns A promise that resolves to the message object received.\n\t */\n\tpublic override async run(\n\t\tchannel: MessagePrompterChannelTypes,\n\t\tauthorOrFilter: User | CollectorFilter<[Message]>\n\t): Promise<IMessagePrompterExplicitMessageReturn | Message> {\n\t\tif (isTextBasedChannel(channel)) {\n\t\t\tif (!isNullish(this.editMessage) && this.editMessage.editable) {\n\t\t\t\tthis.appliedMessage = await this.editMessage.edit(this.message);\n\t\t\t} else {\n\t\t\t\tthis.appliedMessage = await channel.send(this.message);\n\t\t\t}\n\n\t\t\tconst collector = await channel.awaitMessages({\n\t\t\t\t...this.createMessagePromptFilter(authorOrFilter),\n\t\t\t\tmax: 1,\n\t\t\t\ttime: this.timeout,\n\t\t\t\terrors: ['time']\n\t\t\t});\n\t\t\tconst response = collector.first();\n\n\t\t\tif (!response) {\n\t\t\t\tthrow new Error('No messages received');\n\t\t\t}\n\n\t\t\treturn this.explicitReturn\n\t\t\t\t? {\n\t\t\t\t\t\tresponse,\n\t\t\t\t\t\tstrategy: this,\n\t\t\t\t\t\tappliedMessage: this.appliedMessage,\n\t\t\t\t\t\tmessage: this.message\n\t\t\t\t  }\n\t\t\t\t: response;\n\t\t}\n\n\t\tthrow new Error('A channel was provided to which I am not able to send messages');\n\t}\n\n\t/**\n\t * Creates a filter for the collector to filter on\n\t * @return The filter for awaitMessages function\n\t */\n\tprivate createMessagePromptFilter(authorOrFilter: User | CollectorFilter<[Message]>): CollectorOptions<[Message]> {\n\t\treturn {\n\t\t\tfilter: async (message: Message) =>\n\t\t\t\t(typeof authorOrFilter === 'function' ? await authorOrFilter(message) : message.author.id === authorOrFilter.id) &&\n\t\t\t\t!message.author.bot\n\t\t};\n\t}\n}\n","import type { CollectorFilter, EmojiIdentifierResolvable, MessageReaction, User } from 'discord.js';\nimport type { MessagePrompterChannelTypes, MessagePrompterMessage } from '../constants';\nimport type { IMessagePrompterExplicitNumberReturn } from '../ExplicitReturnTypes';\nimport type { IMessagePrompterNumberStrategyOptions } from '../strategyOptions';\nimport { MessagePrompterBaseStrategy } from './MessagePrompterBaseStrategy';\n\nexport class MessagePrompterNumberStrategy extends MessagePrompterBaseStrategy implements IMessagePrompterNumberStrategyOptions {\n\t/**\n\t * The available number emojis\n\t */\n\tpublic numberEmojis: EmojiIdentifierResolvable[];\n\t/**\n\t * The available number emojis\n\t */\n\tpublic start: number;\n\t/**\n\t * The available number emojis\n\t */\n\tpublic end: number;\n\n\t/**\n\t * Constructor for the {@link MessagePrompterBaseStrategy} class\n\t * @param messagePrompter The used instance of {@link MessagePrompter}\n\t * @param options Overrideable options if needed.\n\t */\n\tpublic constructor(message: MessagePrompterMessage, options: IMessagePrompterNumberStrategyOptions) {\n\t\tsuper('number', message, options);\n\n\t\tthis.numberEmojis = options?.numberEmojis ?? MessagePrompterNumberStrategy.numberEmojis;\n\t\tthis.start = options?.start ?? 0;\n\t\tthis.end = options?.end ?? 10;\n\t}\n\n\t/**\n\t * This executes the {@link MessagePrompter} and sends the message if {@link IMessagePrompterOptions.type} equals number.\n\t * The handler will wait for one (1) reaction.\n\t * @param channel The channel to use.\n\t * @param authorOrFilter An author object to validate or a {@linkplain https://discord.js.org/#/docs/main/stable/typedef/CollectorFilter CollectorFilter} predicate callback.\n\t * @returns A promise that resolves to the selected number within the range.\n\t */\n\tpublic async run(\n\t\tchannel: MessagePrompterChannelTypes,\n\t\tauthorOrFilter: User | CollectorFilter<[MessageReaction, User]>\n\t): Promise<IMessagePrompterExplicitNumberReturn | number> {\n\t\t// 0 and 10 are the maximum available emojis as a number\n\t\tif (this.start < 0) throw new TypeError('Starting number cannot be less than 0.');\n\t\tif (this.end > 10) throw new TypeError('Ending number cannot be more than 10.');\n\n\t\tconst numbers = Array.from({ length: this.end - this.start + 1 }, (_, n: number) => n + this.start);\n\t\tconst emojis = this.numberEmojis.slice(this.start, this.end);\n\t\tconst response = await this.collectReactions(channel, authorOrFilter, emojis);\n\n\t\tconst emojiIndex = emojis.findIndex((emoji) => (response?.emoji?.id ?? response?.emoji?.name) === emoji);\n\t\tconst number = numbers[emojiIndex];\n\n\t\t// prettier-ignore\n\t\treturn this.explicitReturn ? { ...response, number } : number;\n\t}\n\n\t/**\n\t * The default available number emojis\n\t */\n\tpublic static numberEmojis = ['0️⃣', '1️⃣', '2️⃣', '3️⃣', '4️⃣', '5️⃣', '6️⃣', '7️⃣', '8️⃣', '9️⃣', '🔟'];\n}\n","import type { CollectorFilter, EmojiIdentifierResolvable, EmojiResolvable, MessageReaction, User } from 'discord.js';\nimport type { MessagePrompterChannelTypes, MessagePrompterMessage } from '../constants';\nimport type { IMessagePrompterExplicitReturnBase } from '../ExplicitReturnTypes';\nimport type { IMessagePrompterReactionStrategyOptions } from '../strategyOptions';\nimport { MessagePrompterBaseStrategy } from './MessagePrompterBaseStrategy';\n\nexport class MessagePrompterReactionStrategy extends MessagePrompterBaseStrategy implements MessagePrompterReactionStrategy {\n\t/**\n\t * The emojis used\n\t */\n\tpublic reactions: EmojiIdentifierResolvable[];\n\n\t/**\n\t * Constructor for the {@link MessagePrompterReactionStrategy} class\n\t * @param messagePrompter The used instance of {@link MessagePrompter}\n\t * @param options Overrideable options if needed.\n\t */\n\tpublic constructor(message: MessagePrompterMessage, options: IMessagePrompterReactionStrategyOptions) {\n\t\tsuper('reactions', message, options);\n\n\t\tthis.reactions = options?.reactions;\n\t}\n\n\t/**\n\t * This executes the {@link MessagePrompterReactionStrategy} and sends the message.\n\t * The handler will wait for one (1) reaction.\n\t * @param channel The channel to use.\n\t * @param authorOrFilter An author object to validate or a {@linkplain https://discord.js.org/#/docs/main/stable/typedef/CollectorFilter CollectorFilter} predicate callback.\n\t * @returns A promise that resolves to the reaction object.\n\t */\n\tpublic async run(\n\t\tchannel: MessagePrompterChannelTypes,\n\t\tauthorOrFilter: User | CollectorFilter<[MessageReaction, User]>\n\t): Promise<IMessagePrompterExplicitReturnBase | string | EmojiResolvable> {\n\t\tif (!this.reactions?.length) throw new TypeError('There are no reactions provided.');\n\n\t\tconst response = await this.collectReactions(channel, authorOrFilter, this.reactions);\n\n\t\treturn this.explicitReturn ? response : response.reaction ?? response;\n\t}\n}\n","import type { Ctor } from '@sapphire/utilities';\nimport type { CollectorFilter, EmojiResolvable, Message, MessageReaction, User } from 'discord.js';\nimport type { MessagePrompterChannelTypes, MessagePrompterMessage } from './constants';\nimport type {\n\tIMessagePrompterExplicitConfirmReturn,\n\tIMessagePrompterExplicitMessageReturn,\n\tIMessagePrompterExplicitNumberReturn,\n\tIMessagePrompterExplicitReturnBase\n} from './ExplicitReturnTypes';\nimport { MessagePrompterBaseStrategy } from './strategies/MessagePrompterBaseStrategy';\nimport { MessagePrompterConfirmStrategy } from './strategies/MessagePrompterConfirmStrategy';\nimport { MessagePrompterMessageStrategy } from './strategies/MessagePrompterMessageStrategy';\nimport { MessagePrompterNumberStrategy } from './strategies/MessagePrompterNumberStrategy';\nimport { MessagePrompterReactionStrategy } from './strategies/MessagePrompterReactionStrategy';\nimport type {\n\tIMessagePrompterConfirmStrategyOptions,\n\tIMessagePrompterNumberStrategyOptions,\n\tIMessagePrompterReactionStrategyOptions,\n\tIMessagePrompterStrategyOptions\n} from './strategyOptions';\n\nexport interface StrategyReturns {\n\tconfirm: IMessagePrompterExplicitConfirmReturn | boolean;\n\tmessage: IMessagePrompterExplicitMessageReturn | Message;\n\tnumber: IMessagePrompterExplicitNumberReturn | number;\n\treaction: IMessagePrompterExplicitReturnBase | string | EmojiResolvable;\n}\n\nexport interface StrategyOptions {\n\tconfirm: IMessagePrompterConfirmStrategyOptions;\n\tmessage: IMessagePrompterStrategyOptions;\n\tnumber: IMessagePrompterNumberStrategyOptions;\n\treaction: IMessagePrompterReactionStrategyOptions;\n}\n\nexport interface StrategyFilters {\n\tconfirm: [MessageReaction, User];\n\tmessage: [Message];\n\tnumber: [MessageReaction, User];\n\treaction: [MessageReaction, User];\n}\n\n/**\n * This is a {@link MessagePrompter}, a utility that sends a message, prompting for user input. The prompt can resolve to any kind of input.\n * There are several specifiable types to prompt for user input, and they are as follows:\n * - Confirm\n *   This will send a simple Yes/No prompt, using reactions.\n * - Number\n *   This will prompt for an integer. By default it will be a number between 0 and 10 (inclusive), however you can also specify your own custom range (inclusive).\n * - Reactions\n *   This can be any kind of reaction emoji that Discord supports, and as many as you want. This type will return that reaction instead of a boolean.\n * - Message\n *   This will prompt the user and require a response in the form of a message. This can be helpful if you require a user to upload an image for example, or give text input.\n *\n * You must either use this class directly or extend it.\n *\n * {@link MessagePrompter} uses reactions to prompt for a yes/no answer and returns it.\n * You can modify the confirm and cancel reaction used for each message, or use the {@link MessagePrompter.defaultPrompts}.\n * {@link MessagePrompter.defaultPrompts} is also static so you can modify these directly.\n *\n * @example\n * ```typescript\n * const { MessagePrompter } = require('@sapphire/discord.js-utilities');\n *\n * const handler = new MessagePrompter('Are you sure you want to continue?');\n * const result = await handler.run(channel, author);\n * ```\n *\n * @example\n * ```typescript\n * const { MessagePrompter, MessagePrompterStrategies } = require('@sapphire/discord.js-utilities');\n *\n * const handler = new MessagePrompter('Choose a number between 5 and 10?', MessagePrompterStrategies.Number, {\n * \t\tstart: 5,\n * \t\tend: 10\n * });\n * const result = await handler.run(channel, author);\n * ```\n *\n * @example\n * ```typescript\n * const { MessagePrompter, MessagePrompterStrategies } = require('@sapphire/discord.js-utilities');\n *\n * const handler = new MessagePrompter('Are you happy or sad?', MessagePrompterStrategies.Reaction, {\n * \t\treactions: ['🙂', '🙁']\n * });\n * const result = await handler.run(channel, author);\n * ```\n *\n * @example\n * ```typescript\n * const { MessagePrompter, MessagePrompterStrategies } = require('@sapphire/discord.js-utilities');\n *\n * const handler = new MessagePrompter('Do you love me?', MessagePrompterStrategies.Message);\n * const result = await handler.run(channel, author);\n * ```\n */\nexport class MessagePrompter<S extends keyof StrategyReturns = 'confirm'> {\n\t/**\n\t * The strategy used in {@link MessagePrompter.run}\n\t */\n\tpublic strategy: MessagePrompterBaseStrategy;\n\n\t/**\n\t * Constructor for the {@link MessagePrompter} class\n\t * @param message The message to send.\n\t * @param strategy The strategy name or Instance to use\n\t * @param strategyOptions The options that are passed to the strategy\n\t */\n\tpublic constructor(\n\t\tmessage: MessagePrompterMessage | MessagePrompterBaseStrategy,\n\t\tstrategy?: S,\n\t\tstrategyOptions?: S extends keyof StrategyOptions ? StrategyOptions[S] : never\n\t) {\n\t\tlet strategyToRun: MessagePrompterBaseStrategy;\n\n\t\tif (message instanceof MessagePrompterBaseStrategy) {\n\t\t\tstrategyToRun = message;\n\t\t} else {\n\t\t\tconst mapStrategy = MessagePrompter.strategies.get(strategy ?? MessagePrompter.defaultStrategy);\n\n\t\t\tif (!mapStrategy) {\n\t\t\t\tthrow new Error('No strategy provided');\n\t\t\t}\n\n\t\t\tstrategyToRun = new mapStrategy(message, strategyOptions);\n\t\t}\n\n\t\tthis.strategy = strategyToRun;\n\t}\n\n\t/**\n\t * This executes the {@link MessagePrompter} and sends the message.\n\t * @param channel The channel to use.\n\t * @param authorOrFilter An author object to validate or a {@linkplain https://discord.js.org/#/docs/main/stable/typedef/CollectorFilter CollectorFilter} predicate callback.\n\t */\n\tpublic run<Filter extends S extends keyof StrategyFilters ? StrategyFilters[S] : unknown[]>(\n\t\tchannel: MessagePrompterChannelTypes,\n\t\tauthorOrFilter: User | CollectorFilter<Filter>\n\t): S extends keyof StrategyReturns ? Promise<StrategyReturns[S]> : never {\n\t\treturn this.strategy.run(channel, authorOrFilter as User | CollectorFilter<unknown[]>) as S extends keyof StrategyReturns\n\t\t\t? Promise<StrategyReturns[S]>\n\t\t\t: never;\n\t}\n\n\t/**\n\t * The available strategies\n\t */\n\tpublic static strategies: Map<\n\t\tkeyof StrategyReturns,\n\t\tCtor<\n\t\t\t| ConstructorParameters<typeof MessagePrompterConfirmStrategy>\n\t\t\t| ConstructorParameters<typeof MessagePrompterNumberStrategy>\n\t\t\t| ConstructorParameters<typeof MessagePrompterReactionStrategy>\n\t\t\t| ConstructorParameters<typeof MessagePrompterMessageStrategy>,\n\t\t\tMessagePrompterConfirmStrategy | MessagePrompterNumberStrategy | MessagePrompterReactionStrategy | MessagePrompterMessageStrategy\n\t\t>\n\t\t// @ts-expect-error 2322\n\t> = new Map([\n\t\t['confirm', MessagePrompterConfirmStrategy],\n\t\t['number', MessagePrompterNumberStrategy],\n\t\t['reaction', MessagePrompterReactionStrategy],\n\t\t['message', MessagePrompterMessageStrategy]\n\t]);\n\n\t/**\n\t * The default strategy to use\n\t */\n\tpublic static defaultStrategy: keyof StrategyReturns = 'confirm';\n}\n","import { Time } from '@sapphire/time-utilities';\nimport { Awaited, isFunction } from '@sapphire/utilities';\nimport type { RESTPostAPIChannelMessageJSONBody } from 'discord-api-types/v9';\nimport {\n\tCollection,\n\tMessage,\n\tMessageEmbed,\n\tMessageEmbedOptions,\n\tMessageOptions,\n\tMessagePayload,\n\tMessageReaction,\n\tReactionCollector,\n\tSnowflake,\n\tUser\n} from 'discord.js';\nimport { MessageBuilder } from '../builders/MessageBuilder';\nimport { isGuildBasedChannel } from '../type-guards';\n\n/**\n * This is a {@link PaginatedMessage}, a utility to paginate messages (usually embeds).\n * You must either use this class directly or extend it.\n *\n * {@link PaginatedMessage} uses actions, these are essentially reaction emojis, when triggered run the said action.\n * You can utilize your own actions, or you can use the {@link PaginatedMessage.defaultActions}.\n * {@link PaginatedMessage.defaultActions} is also static so you can modify these directly.\n *\n * {@link PaginatedMessage} also uses pages, these are simply {@linkplain https://discord.js.org/#/docs/main/stable/class/APIMessage MessagePayloads}.\n *\n * @example\n * ```typescript\n * const myPaginatedMessage = new PaginatedMessage();\n * // Once you have an instance of PaginatedMessage you can call various methods on it to add pages to it.\n * // For more details see each method's documentation.\n *\n * myPaginatedMessage.addPageEmbed((embed) => {\n *\t\tembed\n *\t\t\t.setColor('#FF0000')\n *\t\t\t.setDescription('example description');\n *\n *\t\treturn embed;\n * });\n *\n * myPaginatedMessage.addPageBuilder((builder) => {\n *\t\tconst embed = new MessageEmbed()\n *\t\t\t.setColor('#FF0000')\n *\t\t\t.setDescription('example description');\n *\n *\t\treturn builder\n *\t\t\t.setContent('example content')\n *\t\t\t.setEmbed(embed);\n * });\n *\n * myPaginatedMessage.addPageContent('Example');\n *\n * myPaginatedMessage.run(message)\n * ```\n *\n * @remark You can also provide a MessageEmbed template. This will be applied to every page.\n * If a page itself has an embed then the two will be merged, with the content of\n * the page's embed taking priority over the template.\n *\n * Furthermore, if the template has a footer then it will be applied _after_ the page index part of the footer\n * with a space preceding the template. For example, when setting `- Powered by Sapphire Framework`\n * the resulting footer will be `1/2 - Powered by Sapphire Framework`\n * @example\n * ```typescript\n * const myPaginatedMessage = new PaginatedMessage({\n * \ttemplate: new MessageEmbed().setColor('#FF0000').setFooter('- Powered by Sapphire framework')\n * });\n * ```\n *\n * @remark To utilize actions you can implement IPaginatedMessageAction into a class.\n * @example\n * ```typescript\n * class ForwardAction implements IPaginatedMessageAction {\n *   public id = '▶️';\n *\n *   public run({ handler }) {\n *     if (handler.index !== handler.pages.length - 1) ++handler.index;\n *   }\n * }\n *\n * // You can also give the object directly.\n *\n * const StopAction: IPaginatedMessageAction = {\n *   id: '⏹️',\n *   disableResponseEdit: true,\n *   run: ({ response, collector }) => {\n *     await response.reactions.removeAll();\n *     collector!.stop();\n *   }\n * }\n * ```\n */\nexport class PaginatedMessage {\n\t/**\n\t * The pages to be converted to {@link PaginatedMessage.messages}\n\t */\n\tpublic pages: MessagePage[];\n\n\t/**\n\t * The response message used to edit on page changes.\n\t */\n\tpublic response: Message | null = null;\n\n\t/**\n\t * The collector used for handling reactions.\n\t */\n\tpublic collector: ReactionCollector | null = null;\n\n\t/**\n\t * The pages which were converted from {@link PaginatedMessage.pages}\n\t */\n\tpublic messages: (MessagePayload | null)[] = [];\n\n\t/**\n\t * The actions which are to be used.\n\t */\n\tpublic actions = new Map<string, IPaginatedMessageAction>();\n\n\t/**\n\t * The handler's current page/message index.\n\t */\n\tpublic index = 0;\n\n\t/**\n\t * The amount of milliseconds to idle before the paginator is closed. Defaults to 20 minutes.\n\t */\n\tpublic idle = Time.Minute * 20;\n\n\t/**\n\t * The template for this {@link PaginatedMessage}.\n\t * You can use templates to set defaults that will apply to each and every page in the {@link PaginatedMessage}\n\t */\n\tpublic template: MessageOptions;\n\n\t/**\n\t * Custom text to show in front of the page index in the embed footer.\n\t * PaginatedMessage will automatically add a space (` `) after the given text. You do not have to add it yourself.\n\t * @default ```PaginatedMessage.pageIndexPrefix``` (static property)\n\t */\n\tpublic pageIndexPrefix = PaginatedMessage.pageIndexPrefix;\n\n\t/**\n\t * Constructor for the {@link PaginatedMessage} class\n\t * @param __namedParameters The {@link PaginatedMessageOptions} for this instance of the {@link PaginatedMessage} class\n\t */\n\tpublic constructor({ pages, actions, template, pageIndexPrefix }: PaginatedMessageOptions = {}) {\n\t\tthis.pages = pages ?? [];\n\n\t\tfor (const page of this.pages) this.messages.push(page instanceof MessagePayload ? page : null);\n\t\tfor (const action of actions ?? this.constructor.defaultActions) this.actions.set(action.id, action);\n\n\t\tthis.template = PaginatedMessage.resolveTemplate(template);\n\t\tthis.pageIndexPrefix = pageIndexPrefix ?? PaginatedMessage.pageIndexPrefix;\n\t}\n\n\tpublic setPromptMessage(message: string) {\n\t\tPaginatedMessage.promptMessage = message;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the handler's current page/message index.\n\t * @param index The number to set the index to.\n\t */\n\tpublic setIndex(index: number): this {\n\t\tthis.index = index;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the amount of time to idle before the paginator is closed.\n\t * @param idle The number to set the idle to.\n\t */\n\tpublic setIdle(idle: number): this {\n\t\tthis.idle = idle;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clears all current actions and sets them. The order given is the order they will be used.\n\t * @param actions The actions to set.\n\t */\n\tpublic setActions(actions: IPaginatedMessageAction[]): this {\n\t\tthis.actions.clear();\n\t\treturn this.addActions(actions);\n\t}\n\n\t/**\n\t * Adds actions to the existing ones. The order given is the order they will be used.\n\t * @param actions The actions to add.\n\t */\n\tpublic addActions(actions: IPaginatedMessageAction[]): this {\n\t\tfor (const action of actions) this.addAction(action);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds an action to the existing ones. This will be added as the last action.\n\t * @param action The action to add.\n\t */\n\tpublic addAction(action: IPaginatedMessageAction): this {\n\t\tthis.actions.set(action.id, action);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Checks whether or not the handler has a specific page.\n\t * @param index The index to check.\n\t */\n\tpublic hasPage(index: number): boolean {\n\t\treturn index >= 0 && index < this.pages.length;\n\t}\n\n\t/**\n\t * Clears all current pages and messages and sets them. The order given is the order they will be used.\n\t * @param pages The pages to set.\n\t */\n\tpublic setPages(pages: MessagePage[]) {\n\t\tthis.pages = [];\n\t\tthis.messages = [];\n\t\tthis.addPages(pages);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a page to the existing ones. This will be added as the last page.\n\t * @remark While you can use this method you should first check out\n\t * {@link PaginatedMessage.addPageBuilder},\n\t * {@link PaginatedMessage.addPageContent} and\n\t * {@link PaginatedMessage.addPageEmbed} as\n\t * these are easier functional methods of adding pages and will likely already suffice for your needs.\n\t *\n\t * @param page The page to add.\n\t */\n\tpublic addPage(page: MessagePage): this {\n\t\tthis.pages.push(page);\n\t\tthis.messages.push(page instanceof MessagePayload ? page : null);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a page to the existing ones using a {@link MessageBuilder}. This will be added as the last page.\n\t * @param builder Either a callback whose first parameter is `new MessageBuilder()`, or an already constructed {@link MessageBuilder}\n\t * @example\n\t * ```typescript\n\t * const { PaginatedMessage } = require('@sapphire/discord.js-utilities');\n\t * const { MessageEmbed } = require('discord.js');\n\t *\n\t * const paginatedMessage = new PaginatedMessage()\n\t * \t.addPageBuilder((builder) => {\n\t * \t\tconst embed = new MessageEmbed()\n\t * \t\t\t.setColor('#FF0000')\n\t * \t\t\t.setDescription('example description');\n\t *\n\t * \t\treturn builder\n\t * \t\t\t.setContent('example content')\n\t * \t\t\t.setEmbed(embed);\n\t * });\n\t * ```\n\t * @example\n\t * ```typescript\n\t * const { MessageEmbed } = require('discord.js');\n\t * const { MessageBuilder, PaginatedMessage } = require('@sapphire/discord.js-utilities');\n\t *\n\t * const embed = new MessageEmbed()\n\t * \t.setColor('#FF0000')\n\t * \t.setDescription('example description');\n\t *\n\t * const builder = new MessageBuilder()\n\t * \t.setContent('example content')\n\t * \t.setEmbed(embed);\n\t *\n\t * const paginatedMessage = new PaginatedMessage()\n\t * \t.addPageBuilder(builder);\n\t * ```\n\t */\n\tpublic addPageBuilder(builder: MessageBuilder | ((builder: MessageBuilder) => MessageBuilder)): this {\n\t\treturn this.addPage(isFunction(builder) ? builder(new MessageBuilder()) : builder);\n\t}\n\n\t/**\n\t * Adds a page to the existing ones asynchronously using a {@link MessageBuilder}. This wil be added as the last page.\n\t * @param builder Either a callback whose first parameter is `new MessageBuilder()`, or an already constructed {@link MessageBuilder}\n\t * @example\n\t * ```typescript\n\t * const { PaginatedMessage } = require('@sapphire/discord.js-utilities');\n\t * const { MessageEmbed } = require('discord.js');\n\t *\n\t * const paginatedMessage = new PaginatedMessage()\n\t * \t.addAsyncPageBuilder(async (builder) => {\n\t * \t\tconst someRemoteData = await fetch('https://contoso.com/api/users');\n\t *\n\t * \t\tconst embed = new MessageEmbed()\n\t * \t\t\t.setColor('#FF0000')\n\t * \t\t\t.setDescription(someRemoteData.data);\n\t *\n\t * \t\treturn builder\n\t * \t\t\t.setContent('example content')\n\t * \t\t\t.setEmbed(embed);\n\t * });\n\t * ```\n\t */\n\tpublic addAsyncPageBuilder(builder: MessageBuilder | ((builder: MessageBuilder) => Promise<MessageBuilder>)): this {\n\t\treturn this.addPage(async () => (isFunction(builder) ? builder(new MessageBuilder()) : builder));\n\t}\n\n\t/**\n\t * Adds a page to the existing ones using simple message content. This will be added as the last page.\n\t * @param content The content to set.\n\t * @example\n\t * ```typescript\n\t * const { PaginatedMessage } = require('@sapphire/discord.js-utilities');\n\t *\n\t * const paginatedMessage = new PaginatedMessage()\n\t * \t.addPageContent('example content');\n\t * ```\n\t */\n\tpublic addPageContent(content: string): this {\n\t\treturn this.addPage({ content });\n\t}\n\n\t/**\n\t * Adds a page to the existing ones using a {@link MessageEmbed}. This wil be added as the last page.\n\t * @param embed Either a callback whose first paramter is `new MessageEmbed()`, or an already constructed {@link MessageEmbed}\n\t * @example\n\t * ```typescript\n\t * const { PaginatedMessage } = require('@sapphire/discord.js-utilities');\n\t *\n\t * const paginatedMessage = new PaginatedMessage()\n\t * \t.addPageEmbed((embed) => {\n\t * \t\tembed\n\t * \t\t\t.setColor('#FF0000')\n\t * \t\t\t.setDescription('example description');\n\t *\n\t * \t\treturn embed;\n\t * });\n\t * ```\n\t * @example\n\t * ```typescript\n\t * const { PaginatedMessage } = require('@sapphire/discord.js-utilities');\n\t *\n\t * const embed = new MessageEmbed()\n\t * \t.setColor('#FF0000')\n\t * \t.setDescription('example description');\n\t *\n\t * const paginatedMessage = new PaginatedMessage()\n\t * \t.addPageEmbed(embed);\n\t * ```\n\t */\n\tpublic addPageEmbed(embed: MessageEmbed | ((embed: MessageEmbed) => MessageEmbed)): this {\n\t\treturn this.addPage({ embeds: isFunction(embed) ? [embed(new MessageEmbed())] : [embed] });\n\t}\n\n\t/**\n\t * Adds a page to the existing ones asynchronously using a {@link MessageEmbed}. This wil be added as the last page.\n\t * @param embed Either a callback whose first paramter is `new MessageEmbed()`, or an already constructed {@link MessageEmbed}\n\t * @example\n\t * ```typescript\n\t * const { PaginatedMessage } = require('@sapphire/discord.js-utilities');\n\t *\n\t * const paginatedMessage = new PaginatedMessage()\n\t * \t.addAsyncPageEmbed(async (embed) => {\n\t *\t\tconst someRemoteData = await fetch('https://contoso.com/api/users');\n\t *\n\t * \t\tembed\n\t * \t\t\t.setColor('#FF0000')\n\t * \t\t\t.setDescription(someRemoteData.data);\n\t *\n\t * \t\treturn embed;\n\t * });\n\t * ```\n\t */\n\tpublic addAsyncPageEmbed(embed: MessageEmbed | ((builder: MessageEmbed) => Promise<MessageEmbed>)): this {\n\t\treturn this.addPage(async () => ({ embeds: isFunction(embed) ? [await embed(new MessageEmbed())] : [embed] }));\n\t}\n\n\t/**\n\t * Adds a page to the existing ones asynchronously using multiple {@link MessageEmbed}'s. This wil be added as the last page.\n\t * @remark When using this with a callback this will construct 10 {@link MessageEmbed}'s in the callback parameters, regardless of how many are actually used.\n\t * If this a performance impact you do not want to cope with then it is recommended to use {@link PaginatedMessage.addPageBuilder} instead, which will let you add\n\t * as many embeds as you want, albeit manually\n\t * @param embeds Either a callback which receives 10 parameters of `new MessageEmbed()`, or an array of already constructed {@link MessageEmbed}'s\n\t * @example\n\t * ```typescript\n\t * const { PaginatedMessage } = require('@sapphire/discord.js-utilities');\n\t *\n\t * const paginatedMessage = new PaginatedMessage()\n\t * \t.addPageEmbeds((embed1, embed2, embed3) => { // You can add up to 10 embeds\n\t * \t\tembed1\n\t * \t\t\t.setColor('#FF0000')\n\t * \t\t\t.setDescription('example description 1');\n\t *\n\t * \t\tembed2\n\t * \t\t\t.setColor('#00FF00')\n\t * \t\t\t.setDescription('example description 2');\n\t *\n\t * \t\tembed3\n\t * \t\t\t.setColor('#0000FF')\n\t * \t\t\t.setDescription('example description 3');\n\t *\n\t * \t\treturn [embed1, embed2, embed3];\n\t * });\n\t * ```\n\t * @example\n\t * ```typescript\n\t * const { PaginatedMessage } = require('@sapphire/discord.js-utilities');\n\t *\n\t * const embed1 = new MessageEmbed()\n\t * \t.setColor('#FF0000')\n\t * \t.setDescription('example description 1');\n\t *\n\t * const embed2 = new MessageEmbed()\n\t * \t.setColor('#00FF00')\n\t * \t.setDescription('example description 2');\n\t *\n\t * const embed3 = new MessageEmbed()\n\t * \t.setColor('#0000FF')\n\t * \t.setDescription('example description 3');\n\t *\n\t * const paginatedMessage = new PaginatedMessage()\n\t * \t.addPageEmbeds([embed1, embed2, embed3]); // You can add up to 10 embeds\n\t * ```\n\t */\n\tpublic addPageEmbeds(\n\t\tembeds:\n\t\t\t| MessageEmbed[]\n\t\t\t| ((\n\t\t\t\t\tembed1: MessageEmbed,\n\t\t\t\t\tembed2: MessageEmbed,\n\t\t\t\t\tembed3: MessageEmbed,\n\t\t\t\t\tembed4: MessageEmbed,\n\t\t\t\t\tembed5: MessageEmbed,\n\t\t\t\t\tembed6: MessageEmbed,\n\t\t\t\t\tembed7: MessageEmbed,\n\t\t\t\t\tembed8: MessageEmbed,\n\t\t\t\t\tembed9: MessageEmbed,\n\t\t\t\t\tembed10: MessageEmbed\n\t\t\t  ) => MessageEmbed[])\n\t): this {\n\t\tlet processedEmbeds = isFunction(embeds)\n\t\t\t? embeds(\n\t\t\t\t\tnew MessageEmbed(),\n\t\t\t\t\tnew MessageEmbed(),\n\t\t\t\t\tnew MessageEmbed(),\n\t\t\t\t\tnew MessageEmbed(),\n\t\t\t\t\tnew MessageEmbed(),\n\t\t\t\t\tnew MessageEmbed(),\n\t\t\t\t\tnew MessageEmbed(),\n\t\t\t\t\tnew MessageEmbed(),\n\t\t\t\t\tnew MessageEmbed(),\n\t\t\t\t\tnew MessageEmbed()\n\t\t\t  )\n\t\t\t: embeds;\n\n\t\tif (processedEmbeds.length > 10) {\n\t\t\tprocessedEmbeds = processedEmbeds.slice(0, 10);\n\t\t}\n\n\t\treturn this.addPage({ embeds: processedEmbeds });\n\t}\n\n\t/**\n\t * Adds a page to the existing ones using multiple {@link MessageEmbed}'s. This wil be added as the last page.\n\t * @remark When using this with a callback this will construct 10 {@link MessageEmbed}'s in the callback parameters, regardless of how many are actually used.\n\t * If this a performance impact you do not want to cope with then it is recommended to use {@link PaginatedMessage.addPageBuilder} instead, which will let you add\n\t * as many embeds as you want, albeit manually\n\t * @param embeds Either a callback which receives 10 parameters of `new MessageEmbed()`, or an array of already constructed {@link MessageEmbed}'s\n\t * @example\n\t * ```typescript\n\t * const { PaginatedMessage } = require('@sapphire/discord.js-utilities');\n\t *\n\t * const paginatedMessage = new PaginatedMessage().addAsyncPageEmbeds(async (embed0, embed1, embed2) => {\n\t * \tconst someRemoteData = (await fetch('https://contoso.com/api/users')) as any;\n\t *\n\t * \tfor (const [index, user] of Object.entries(someRemoteData.users.slice(0, 10)) as [`${0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10}`, any][]) {\n\t * \t\tswitch (index) {\n\t * \t\t\tcase '0': {\n\t * \t\t\t\tembed0.setColor('#FF0000').setDescription('example description 1').setAuthor(user.name);\n\t * \t\t\t\tbreak;\n\t * \t\t\t}\n\t * \t\t\tcase '1': {\n\t * \t\t\t\tembed1.setColor('#00FF00').setDescription('example description 2').setAuthor(user.name);\n\t * \t\t\t\tbreak;\n\t * \t\t\t}\n\t * \t\t\tcase '2': {\n\t * \t\t\t\tembed2.setColor('#0000FF').setDescription('example description 3').setAuthor(user.name);\n\t * \t\t\t\tbreak;\n\t * \t\t\t}\n\t * \t\t}\n\t * \t}\n\t *\n\t * \treturn [embed0, embed1, embed2];\n\t * });\n\t * ```\n\t * @example\n\t * ```typescript\n\t * const { PaginatedMessage } = require('@sapphire/discord.js-utilities');\n\t *\n\t * const embed1 = new MessageEmbed()\n\t * \t.setColor('#FF0000')\n\t * \t.setDescription('example description 1');\n\t *\n\t * const embed2 = new MessageEmbed()\n\t * \t.setColor('#00FF00')\n\t * \t.setDescription('example description 2');\n\t *\n\t * const embed3 = new MessageEmbed()\n\t * \t.setColor('#0000FF')\n\t * \t.setDescription('example description 3');\n\t *\n\t * const paginatedMessage = new PaginatedMessage()\n\t * \t.addAsyncPageEmbeds([embed1, embed2, embed3]); // You can add up to 10 embeds\n\t * ```\n\t */\n\tpublic addAsyncPageEmbeds(\n\t\tembeds:\n\t\t\t| MessageEmbed[]\n\t\t\t| ((\n\t\t\t\t\tembed1: MessageEmbed,\n\t\t\t\t\tembed2: MessageEmbed,\n\t\t\t\t\tembed3: MessageEmbed,\n\t\t\t\t\tembed4: MessageEmbed,\n\t\t\t\t\tembed5: MessageEmbed,\n\t\t\t\t\tembed6: MessageEmbed,\n\t\t\t\t\tembed7: MessageEmbed,\n\t\t\t\t\tembed8: MessageEmbed,\n\t\t\t\t\tembed9: MessageEmbed,\n\t\t\t\t\tembed10: MessageEmbed\n\t\t\t  ) => Promise<MessageEmbed[]>)\n\t): this {\n\t\treturn this.addPage(async () => {\n\t\t\tlet processedEmbeds = isFunction(embeds)\n\t\t\t\t? await embeds(\n\t\t\t\t\t\tnew MessageEmbed(),\n\t\t\t\t\t\tnew MessageEmbed(),\n\t\t\t\t\t\tnew MessageEmbed(),\n\t\t\t\t\t\tnew MessageEmbed(),\n\t\t\t\t\t\tnew MessageEmbed(),\n\t\t\t\t\t\tnew MessageEmbed(),\n\t\t\t\t\t\tnew MessageEmbed(),\n\t\t\t\t\t\tnew MessageEmbed(),\n\t\t\t\t\t\tnew MessageEmbed(),\n\t\t\t\t\t\tnew MessageEmbed()\n\t\t\t\t  )\n\t\t\t\t: embeds;\n\n\t\t\tif (processedEmbeds.length > 10) {\n\t\t\t\tprocessedEmbeds = processedEmbeds.slice(0, 10);\n\t\t\t}\n\n\t\t\treturn { embeds: processedEmbeds };\n\t\t});\n\t}\n\n\t/**\n\t * Add pages to the existing ones. The order given is the order they will be used.\n\t * @param pages The pages to add.\n\t */\n\tpublic addPages(pages: MessagePage[]): this {\n\t\tfor (const page of pages) this.addPage(page);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Executes the {@link PaginatedMessage} and sends the pages corresponding with {@link PaginatedMessage.index}.\n\t * The handler will start collecting reactions and running actions once all actions have been reacted to the message.\n\t * @param message The message that triggered this {@link PaginatedMessage}.\n\t * Generally this will be the command message, but it can also be another message from your client, i.e. to indicate a loading state.\n\t * @param target The user who will be able to interact with the reactions of this {@link PaginatedMessage}. Defaults to `message.author`.\n\t */\n\tpublic async run(message: Message, target = message.author): Promise<this> {\n\t\t// Try to get the previous PaginatedMessage for this user\n\t\tconst paginatedMessage = PaginatedMessage.handlers.get(target.id);\n\n\t\t// If a PaginatedMessage was found then stop it\n\t\tif (paginatedMessage) paginatedMessage.collector!.stop();\n\n\t\t// If the message was sent by a bot, then set the response as this one\n\t\tif (message.author.bot) this.response = message;\n\n\t\tawait this.resolvePagesOnRun(message.channel);\n\n\t\t// Sanity checks to handle\n\t\tif (!this.messages.length) throw new Error('There are no messages.');\n\t\tif (!this.actions.size) throw new Error('There are no messages.');\n\n\t\tawait this.setUpMessage(message.channel, target);\n\t\tawait this.setUpReactions(message.channel, target);\n\n\t\tconst messageId = this.response!.id;\n\n\t\tif (this.collector) {\n\t\t\tthis.collector!.once('end', () => {\n\t\t\t\tPaginatedMessage.messages.delete(messageId);\n\t\t\t\tPaginatedMessage.handlers.delete(target.id);\n\t\t\t});\n\n\t\t\tPaginatedMessage.messages.set(messageId, this);\n\t\t\tPaginatedMessage.handlers.set(target.id, this);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Executed whenever {@link PaginatedMessage.run} is called.\n\t */\n\tpublic async resolvePagesOnRun(channel: Message['channel']): Promise<void> {\n\t\tfor (let i = 0; i < this.pages.length; i++) await this.resolvePage(channel, i);\n\t}\n\n\t/**\n\t * Executed whenever an action is triggered and resolved.\n\t * @param index The index to resolve.\n\t */\n\tpublic async resolvePage(channel: Message['channel'], index: number): Promise<MessagePayload> {\n\t\t// If the message was already processed, do not load it again:\n\t\tconst message = this.messages[index];\n\t\tif (message !== null) return message;\n\n\t\t// Load the page and return it:\n\t\tconst resolved = await this.handlePageLoad(this.pages[index], channel, index);\n\t\tthis.messages[index] = resolved;\n\n\t\treturn resolved;\n\t}\n\n\t/**\n\t * Clones the current handler into a new instance.\n\t */\n\tpublic clone(): PaginatedMessage {\n\t\tconst clone = new this.constructor({ pages: this.pages, actions: [] }).setIndex(this.index).setIdle(this.idle);\n\t\tclone.actions = this.actions;\n\t\tclone.response = this.response;\n\t\tclone.template = this.template;\n\t\treturn clone;\n\t}\n\n\t/**\n\t * Sets up the message.\n\t * @param channel The channel the handler is running at.\n\t * @param author The author the handler is for.\n\t */\n\tprotected async setUpMessage(channel: Message['channel'], author: User): Promise<void>;\n\tprotected async setUpMessage(channel: Message['channel']): Promise<void> {\n\t\tconst firstPage = this.messages[this.index]!;\n\t\tif (this.response) await this.response.edit(firstPage);\n\t\telse this.response = (await channel.send(firstPage)) as Message;\n\t}\n\n\t/**\n\t * Sets up the message's reactions and the collector.\n\t * @param channel The channel the handler is running at.\n\t * @param author The author the handler is for.\n\t */\n\tprotected async setUpReactions(channel: Message['channel'], author: User): Promise<void> {\n\t\tif (this.pages.length > 1) {\n\t\t\tthis.collector = this.response!.createReactionCollector({\n\t\t\t\tfilter: (reaction: MessageReaction, user: User) =>\n\t\t\t\t\tuser.id === author.id && (this.actions.has(reaction.emoji.identifier) || this.actions.has(reaction.emoji.name ?? '')),\n\t\t\t\tidle: this.idle\n\t\t\t})\n\t\t\t\t.on('collect', this.handleCollect.bind(this, author, channel))\n\t\t\t\t.on('end', this.handleEnd.bind(this));\n\n\t\t\tfor (const id of this.actions.keys()) {\n\t\t\t\tif (this.collector.ended) break;\n\t\t\t\tawait this.response!.react(id);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Handles the load of a page.\n\t * @param page The page to be loaded.\n\t * @param channel The channel the paginated message runs at.\n\t * @param index The index of the current page.\n\t */\n\tprotected async handlePageLoad(page: MessagePage, channel: Message['channel'], index: number): Promise<MessagePayload> {\n\t\tconst options = isFunction(page) ? await page(index, this.pages, this) : page;\n\t\tconst resolved = options instanceof MessagePayload ? options : new MessagePayload(channel, this.applyTemplate(this.template, options));\n\t\treturn this.applyFooter(resolved.resolveData(), index);\n\t}\n\n\t/**\n\t * Handles the `collect` event from the collector.\n\t * @param author The the handler is for.\n\t * @param channel The channel the handler is running at.\n\t * @param reaction The reaction that was received.\n\t * @param user The user that reacted to the message.\n\t */\n\tprotected async handleCollect(author: User, channel: Message['channel'], reaction: MessageReaction, user: User): Promise<void> {\n\t\tif (isGuildBasedChannel(channel) && channel.client.user && channel.permissionsFor(channel.client.user.id)?.has('MANAGE_MESSAGES')) {\n\t\t\tawait reaction.users.remove(user);\n\t\t}\n\n\t\tconst action = (this.actions.get(reaction.emoji.identifier) ?? this.actions.get(reaction.emoji.name ?? ''))!;\n\t\tconst previousIndex = this.index;\n\n\t\tawait action.run({\n\t\t\thandler: this,\n\t\t\tauthor,\n\t\t\tchannel,\n\t\t\tresponse: this.response!,\n\t\t\tcollector: this.collector!\n\t\t});\n\n\t\tif (previousIndex !== this.index) {\n\t\t\tawait this.response?.edit(await this.resolvePage(channel, this.index));\n\t\t}\n\t}\n\n\t/**\n\t * Handles the `end` event from the collector.\n\t * @param reason The reason for which the collector was ended.\n\t */\n\tprotected async handleEnd(_: Collection<Snowflake, MessageReaction>, reason: string): Promise<void> {\n\t\t// Remove all listeners from the collector:\n\t\tthis.collector?.removeAllListeners();\n\n\t\t// Do not remove reactions if the message, channel, or guild, was deleted:\n\t\tif (this.response && !PaginatedMessage.deletionStopReasons.includes(reason)) {\n\t\t\tif (\n\t\t\t\tisGuildBasedChannel(this.response.channel) &&\n\t\t\t\tthis.response.client.user &&\n\t\t\t\tthis.response.channel.permissionsFor(this.response.client.user.id)?.has('MANAGE_MESSAGES')\n\t\t\t) {\n\t\t\t\tawait this.response.reactions.removeAll();\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected applyFooter(message: MessagePayload, index: number): MessagePayload {\n\t\tconst data = message.data as PatchedRESTPostAPIChannelMessageJSONBody;\n\t\tif (!data.embeds?.length) return message;\n\n\t\tfor (const [idx, embed] of Object.entries(data.embeds)) {\n\t\t\tif (embed) {\n\t\t\t\tembed.footer ??= { text: this.template.embeds?.[Number(idx)]?.footer?.text ?? this.template.embeds?.[0]?.footer?.text ?? '' };\n\t\t\t\tembed.footer.text = `${this.pageIndexPrefix ? `${this.pageIndexPrefix} ` : ''}${index + 1} / ${this.pages.length}${\n\t\t\t\t\tembed.footer.text ? `| ${embed.footer.text}` : ''\n\t\t\t\t}`;\n\t\t\t}\n\t\t}\n\n\t\treturn message;\n\t}\n\n\tprivate applyTemplate(template: MessageOptions, options: MessageOptions): MessageOptions {\n\t\tconst embedData = this.applyTemplateEmbed(template.embeds, options.embeds);\n\t\tconst embeds = embedData ? [embedData] : undefined;\n\n\t\treturn { ...template, ...options, embeds };\n\t}\n\n\tprivate applyTemplateEmbed(template: EmbedResolvable, embed: EmbedResolvable): MessageEmbed | MessageEmbedOptions | undefined {\n\t\tif (!embed) return template?.[0];\n\t\tif (!template) return embed?.[0];\n\t\treturn this.mergeEmbeds(template?.[0], embed?.[0]);\n\t}\n\n\tprivate mergeEmbeds(template: MessageEmbed | MessageEmbedOptions, embed: MessageEmbed | MessageEmbedOptions): MessageEmbedOptions {\n\t\treturn {\n\t\t\ttitle: embed.title ?? template.title ?? undefined,\n\t\t\tdescription: embed.description ?? template.description ?? undefined,\n\t\t\turl: embed.url ?? template.url ?? undefined,\n\t\t\ttimestamp: embed.timestamp ?? template.timestamp ?? undefined,\n\t\t\tcolor: embed.color ?? template.color ?? undefined,\n\t\t\tfields: this.mergeArrays(template.fields, embed.fields),\n\t\t\tauthor: embed.author ?? template.author ?? undefined,\n\t\t\tthumbnail: embed.thumbnail ?? template.thumbnail ?? undefined,\n\t\t\timage: embed.image ?? template.image ?? undefined,\n\t\t\tvideo: embed.video ?? template.video ?? undefined,\n\t\t\tfooter: embed.footer ?? template.footer ?? undefined\n\t\t};\n\t}\n\n\tprivate mergeArrays<T>(template?: T[], array?: T[]): undefined | T[] {\n\t\tif (!array) return template;\n\t\tif (!template) return array;\n\t\treturn [...template, ...array];\n\t}\n\n\t/**\n\t * The default actions of this handler.\n\t */\n\tpublic static defaultActions: IPaginatedMessageAction[] = [\n\t\t{\n\t\t\tid: '🔢',\n\t\t\trun: async ({ handler, author, channel }) => {\n\t\t\t\tconst questionMessage = await channel.send(PaginatedMessage.promptMessage);\n\t\t\t\tconst collected = await channel\n\t\t\t\t\t.awaitMessages({\n\t\t\t\t\t\tfilter: (message: Message) => message.author.id === author.id,\n\t\t\t\t\t\tmax: 1,\n\t\t\t\t\t\tidle: Time.Minute * 20\n\t\t\t\t\t})\n\t\t\t\t\t.catch(() => null);\n\n\t\t\t\tif (collected) {\n\t\t\t\t\tconst responseMessage = collected.first();\n\n\t\t\t\t\tif (questionMessage.deletable) await questionMessage.delete();\n\t\t\t\t\tif (responseMessage) {\n\t\t\t\t\t\tif (responseMessage.deletable) await responseMessage.delete();\n\n\t\t\t\t\t\tconst i = Number(responseMessage.content) - 1;\n\n\t\t\t\t\t\tif (!Number.isNaN(i) && handler.hasPage(i)) handler.index = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: '⏪',\n\t\t\trun: ({ handler }) => (handler.index = 0)\n\t\t},\n\t\t{\n\t\t\tid: '◀️',\n\t\t\trun: ({ handler }) => {\n\t\t\t\tif (handler.index === 0) handler.index = handler.pages.length - 1;\n\t\t\t\telse --handler.index;\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: '▶️',\n\t\t\trun: ({ handler }) => {\n\t\t\t\tif (handler.index === handler.pages.length - 1) handler.index = 0;\n\t\t\t\telse ++handler.index;\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: '⏩',\n\t\t\trun: ({ handler }) => (handler.index = handler.pages.length - 1)\n\t\t},\n\t\t{\n\t\t\tid: '⏹️',\n\t\t\trun: async ({ response, collector }) => {\n\t\t\t\tif (\n\t\t\t\t\tisGuildBasedChannel(response.channel) &&\n\t\t\t\t\tresponse.client.user &&\n\t\t\t\t\tresponse.channel.permissionsFor(response.client.user.id)?.has('MANAGE_MESSAGES')\n\t\t\t\t) {\n\t\t\t\t\tawait response.reactions.removeAll();\n\t\t\t\t}\n\n\t\t\t\tcollector.stop();\n\t\t\t}\n\t\t}\n\t];\n\n\t/**\n\t * The reasons sent by {@linkplain https://discord.js.org/#/docs/main/stable/class/ReactionCollector?scrollTo=e-end ReactionCollector#end}\n\t * event when the message (or its owner) has been deleted.\n\t */\n\tpublic static deletionStopReasons = ['messageDelete', 'channelDelete', 'guildDelete'];\n\n\t/**\n\t * Custom prompt message when a user wants to jump to a certain page number.\n\t * @default \"What page would you like to jump to?\"\n\t * @remark To overwrite this property change it in a \"setup\" file prior to calling `client.login()` for your bot.\n\t * @example\n\t * ```typescript\n\t * import { PaginatedMessage } from '@sapphire/discord.js-utilities';\n\t *\n\t * PaginatedMessage.promptMessage = 'Please send the number of the page you would like to jump to.';\n\t * ```\n\t */\n\tpublic static promptMessage = 'What page would you like to jump to?';\n\n\t/**\n\t * Custom text to show in front of the page index in the embed footer.\n\t * PaginatedMessage will automatically add a space (` `) after the given text. You do not have to add it yourself.\n\t * @default \"\"\n\t * @remark To overwrite this property change it somewhere in a \"setup\" file, i.e. where you also call `client.login()` for your bot.\n\t * @example\n\t * ```typescript\n\t * import { PaginatedMessage } from '@sapphire/discord.js-utilities';\n\t *\n\t * PaginatedMessage.pageIndexPrefix = 'Page';\n\t * // This will make the footer of the embed something like \"Page 1/2\"\n\t * ```\n\t */\n\tpublic static pageIndexPrefix = '';\n\n\t/**\n\t * The messages that are currently being handled by a {@link PaginatedMessage}\n\t * The key is the ID of the message that triggered this {@link PaginatedMessage}\n\t *\n\t * This is to ensure that only 1 {@link PaginatedMessage} can run on a specified message at once.\n\t * This is important when having an editable commands solution.\n\t */\n\tpublic static readonly messages = new Map<string, PaginatedMessage>();\n\n\t/**\n\t * The current {@link ReactionCollector} handlers that are active.\n\t * The key is the ID of of the author who sent the message that triggered this {@link PaginatedMessage}\n\t *\n\t * This is to ensure that any given author can only trigger 1 {@link PaginatedMessage}.\n\t * This is important for performance reasons, and users should not have more than 1 {@link PaginatedMessage} open at once.\n\t */\n\tpublic static readonly handlers = new Map<string, PaginatedMessage>();\n\n\tprivate static resolveTemplate(template?: MessageEmbed | MessageOptions): MessageOptions {\n\t\tif (template === undefined) return {};\n\t\tif (template instanceof MessageEmbed) return { embeds: [template] };\n\t\treturn template;\n\t}\n}\n\nexport interface PaginatedMessage {\n\tconstructor: typeof PaginatedMessage;\n}\n\n/**\n * To utilize actions you can use the {@link IPaginatedMessageAction} by implementing it into a class.\n * @example\n * ```typescript\n * class ForwardAction implements IPaginatedMessageAction {\n *   public id = '▶️';\n *\n *   public run({ handler }) {\n *     if (handler.index !== handler.pages.length - 1) ++handler.index;\n *   }\n * }\n *\n * // You can also give the object directly.\n *\n * const StopAction: IPaginatedMessageAction {\n *   id: '⏹️',\n *   disableResponseEdit: true,\n *   run: ({ response, collector }) => {\n *     await response.reactions.removeAll();\n *     collector!.stop();\n *   }\n * }\n * ```\n */\nexport interface IPaginatedMessageAction {\n\tid: string;\n\trun(context: PaginatedMessageActionContext): Awaited<unknown>;\n}\n\n/**\n * The context to be used in {@link IPaginatedMessageAction}.\n */\nexport interface PaginatedMessageActionContext {\n\thandler: PaginatedMessage;\n\tauthor: User;\n\tchannel: Message['channel'];\n\tresponse: Message;\n\tcollector: ReactionCollector;\n}\n\nexport interface PaginatedMessageOptions {\n\t/**\n\t * The pages to display in this {@link PaginatedMessage}\n\t */\n\tpages?: MessagePage[];\n\t/**\n\t * Custom actions to provide when sending the paginated message\n\t */\n\tactions?: IPaginatedMessageAction[];\n\t/**\n\t * The {@link MessageEmbed} or {@link MessageOptions} options to apply to the entire {@link PaginatedMessage}\n\t */\n\ttemplate?: MessageEmbed | MessageOptions;\n\t/**\n\t * @seealso {@link PaginatedMessage.pageIndexPrefix}\n\t */\n\tpageIndexPrefix?: string;\n}\n\n/**\n * The pages that are used for {@link PaginatedMessage.pages}\n *\n * Pages can be either a {@link MessagePayload},\n * or an awaited function that returns a {@link MessagePayload}.\n *\n * Furthermore, {@link MessageOptions} can be used to\n * construct the pages without state. This library also provides {@link MessageBuilder}, which can be used as a chainable\n * alternative to raw objects, similar to how {@link MessageEmbed}\n * works.\n *\n * Ideally, however, you should use the utility functions\n * {@link PaginatedMessage.addPageBuilder `addPageBuilder`}, {@link PaginatedMessage.addPageContent `addPageContent`}, and {@link PaginatedMessage.addPageEmbed `addPageEmbed`}\n * as opposed to manually constructing {@link MessagePage `MessagePages`}. This is because a {@link PaginatedMessage} does a lot of post-processing\n * on the provided pages and we can only guarantee this will work properly when using the utility methods.\n */\nexport type MessagePage =\n\t| ((index: number, pages: MessagePage[], handler: PaginatedMessage) => Awaited<MessagePayload | MessageOptions>)\n\t| MessagePayload\n\t| MessageOptions;\n\ntype EmbedResolvable = MessageOptions['embeds'];\n\ntype PatchedRESTPostAPIChannelMessageJSONBody = Omit<RESTPostAPIChannelMessageJSONBody, 'embed'> & {\n\tembeds?: RESTPostAPIChannelMessageJSONBody['embed'][];\n};\n","import { isFunction } from '@sapphire/utilities';\nimport { Message, MessageEmbed, MessagePayload } from 'discord.js';\nimport { MessageBuilder } from '../builders/MessageBuilder';\nimport { PaginatedMessage } from './PaginatedMessage';\n\n/**\n * This is a LazyPaginatedMessage. Instead of resolving all pages that are functions on {@link PaginatedMessage.run} will resolve when requested.\n */\nexport class LazyPaginatedMessage extends PaginatedMessage {\n\t/**\n\t * Only resolves the page corresponding with the handler's current index.\n\t */\n\tpublic override async resolvePagesOnRun(channel: Message['channel']): Promise<void> {\n\t\tawait this.resolvePage(channel, this.index);\n\t}\n\n\t/**\n\t * Resolves the page corresponding with the given index. This also resolves the index's before and after the given index.\n\t * @param index The index to resolve. Defaults to handler's current index.\n\t */\n\tpublic override async resolvePage(channel: Message['channel'], index: number): Promise<MessagePayload> {\n\t\tconst promises = [super.resolvePage(channel, index)];\n\t\tif (this.hasPage(index - 1)) promises.push(super.resolvePage(channel, index - 1));\n\t\tif (this.hasPage(index + 1)) promises.push(super.resolvePage(channel, index + 1));\n\n\t\tconst [result] = await Promise.all(promises);\n\t\treturn result;\n\t}\n\n\tpublic override addPageBuilder(builder: MessageBuilder | ((builder: MessageBuilder) => MessageBuilder)): this {\n\t\treturn this.addPage(() => (isFunction(builder) ? builder(new MessageBuilder()) : builder));\n\t}\n\n\tpublic override addPageContent(content: string): this {\n\t\treturn this.addPage(() => ({ content }));\n\t}\n\n\tpublic override addPageEmbed(embed: MessageEmbed | ((builder: MessageEmbed) => MessageEmbed)): this {\n\t\treturn this.addPage(() => ({ embeds: typeof embed === 'function' ? [embed(new MessageEmbed())] : [embed] }));\n\t}\n\n\tpublic override addPageEmbeds(\n\t\tembeds:\n\t\t\t| MessageEmbed[]\n\t\t\t| ((\n\t\t\t\t\tembed1: MessageEmbed,\n\t\t\t\t\tembed2: MessageEmbed,\n\t\t\t\t\tembed3: MessageEmbed,\n\t\t\t\t\tembed4: MessageEmbed,\n\t\t\t\t\tembed5: MessageEmbed,\n\t\t\t\t\tembed6: MessageEmbed,\n\t\t\t\t\tembed7: MessageEmbed,\n\t\t\t\t\tembed8: MessageEmbed,\n\t\t\t\t\tembed9: MessageEmbed,\n\t\t\t\t\tembed10: MessageEmbed\n\t\t\t  ) => MessageEmbed[])\n\t): this {\n\t\treturn this.addPage(() => {\n\t\t\tlet processedEmbeds = isFunction(embeds)\n\t\t\t\t? embeds(\n\t\t\t\t\t\tnew MessageEmbed(),\n\t\t\t\t\t\tnew MessageEmbed(),\n\t\t\t\t\t\tnew MessageEmbed(),\n\t\t\t\t\t\tnew MessageEmbed(),\n\t\t\t\t\t\tnew MessageEmbed(),\n\t\t\t\t\t\tnew MessageEmbed(),\n\t\t\t\t\t\tnew MessageEmbed(),\n\t\t\t\t\t\tnew MessageEmbed(),\n\t\t\t\t\t\tnew MessageEmbed(),\n\t\t\t\t\t\tnew MessageEmbed()\n\t\t\t\t  )\n\t\t\t\t: embeds;\n\n\t\t\tif (processedEmbeds.length > 10) {\n\t\t\t\tprocessedEmbeds = processedEmbeds.slice(0, 10);\n\t\t\t}\n\n\t\t\treturn { embeds: processedEmbeds };\n\t\t});\n\t}\n}\n","import { MessageEmbed, MessageEmbedOptions } from 'discord.js';\nimport { PaginatedMessage } from './PaginatedMessage';\n\n/**\n * This is a utility of {@link PaginatedMessage}, except it exclusively paginates the fields of an embed.\n * You must either use this class directly or extend it.\n *\n * @example\n * ```typescript\n * import { PaginatedFieldMessageEmbed } from '@sapphire/discord.js-utilities';\n *\n * new PaginatedFieldMessageEmbed()\n *    .setTitleField('Test pager field')\n *    .setTemplate({ embed })\n *    .setItems([\n *       { title: 'Sapphire Framework', value: 'discord.js Framework' },\n *       { title: 'Sapphire Framework 2', value: 'discord.js Framework 2' },\n *       { title: 'Sapphire Framework 3', value: 'discord.js Framework 3' }\n *     ])\n *    .formatItems((item) => `${item.title}\\n${item.value}`)\n *    .setItemsPerPage(2)\n *    .make()\n *    .run(message);\n * ```\n */\nexport class PaginatedFieldMessageEmbed<T> extends PaginatedMessage {\n\tprivate embedTemplate: MessageEmbed = new MessageEmbed();\n\tprivate totalPages = 0;\n\tprivate items: T[] = [];\n\tprivate itemsPerPage = 10;\n\tprivate fieldTitle = '';\n\n\t/**\n\t * Set the items to paginate.\n\t * @param items The pages to set\n\t */\n\tpublic setItems(items: T[]) {\n\t\tthis.items = items;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the title of the embed field that will be used to paginate the items.\n\t * @param title The field title\n\t */\n\tpublic setTitleField(title: string) {\n\t\tthis.fieldTitle = title;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the amount of items that should be shown per page.\n\t * @param itemsPerPage The number of items\n\t */\n\tpublic setItemsPerPage(itemsPerPage: number) {\n\t\tthis.itemsPerPage = itemsPerPage;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the template to be used to display the embed fields as pages. This template can either be set from a template {@link MessageEmbed} instance or an object with embed options.\n\t *\n\t * @param template MessageEmbed\n\t *\n\t * @example\n\t * ```typescript\n\t * import { PaginatedFieldMessageEmbed } from '@sapphire/discord.js-utilities';\n\t * import { MessageEmbed } from 'discord.js';\n\t *\n\t * new PaginatedFieldMessageEmbed().setTemplate(new MessageEmbed().setTitle('Test pager embed')).make().run(message.author, message.channel);\n\t * ```\n\t *\n\t * @example\n\t * ```typescript\n\t * import { PaginatedFieldMessageEmbed } from '@sapphire/discord.js-utilities';\n\t * import { MessageEmbed } from 'discord.js';\n\t *\n\t * new PaginatedFieldMessageEmbed().setTemplate({ title: 'Test pager embed' }).make().run(message.author, message.channel);\n\t * ```\n\t */\n\tpublic setTemplate(template: MessageEmbedOptions | MessageEmbed) {\n\t\tthis.embedTemplate = template instanceof MessageEmbed ? template : new MessageEmbed(template);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets a format callback that will be mapped to each embed field in the array of items when the embed is paginated. This should convert each item to a format that is either text itself or can be serialized as text.\n\t *\n\t * @example\n\t * ```typescript\n\t * import { PaginatedFieldMessageEmbed } from '@sapphire/discord.js-utilities';\n\t *\n\t * new PaginatedFieldMessageEmbed()\n\t *    .setTitleField('Test field')\n\t *    .setTemplate({ embed })\n\t *    .setItems([\n\t *       { title: 'Sapphire Framework', value: 'discord.js Framework' },\n\t *       { title: 'Sapphire Framework 2', value: 'discord.js Framework 2' },\n\t *       { title: 'Sapphire Framework 3', value: 'discord.js Framework 3' }\n\t *     ])\n\t *    .formatItems((item) => `${item.title}\\n${item.value}`)\n\t *    .make()\n\t *    .run(message);\n\t * ```\n\t * @param value The formatter callback to be applied to each embed item\n\t */\n\tpublic formatItems(formatter: (item: T, index: number, array: T[]) => any) {\n\t\tthis.items = this.items.map(formatter);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Build the pages of the given array.\n\t *\n\t * You must call the [[PaginatedFieldMessageEmbed.make]] and [[PaginatedFieldMessageEmbed.run]] methods last, in that order, for the pagination to work.\n\t *\n\t * @example\n\t * ```typescript\n\t * import { PaginatedFieldMessageEmbed } from '@sapphire/discord.js-utilities';\n\t *\n\t * new PaginatedFieldMessageEmbed()\n\t *    .setTitleField('Test field')\n\t *    .setTemplate({ embed })\n\t *    .setItems([\n\t *       { title: 'Sapphire Framework', value: 'discord.js Framework' },\n\t *       { title: 'Sapphire Framework 2', value: 'discord.js Framework 2' },\n\t *       { title: 'Sapphire Framework 3', value: 'discord.js Framework 3' }\n\t *     ])\n\t *    .formatItems((item) => `${item.title}\\n${item.value}`)\n\t *    .make()\n\t *    .run(message);\n\t * ```\n\t */\n\tpublic make() {\n\t\tif (!this.fieldTitle.length) throw new Error('The title of the field to format must have a value.');\n\t\tif (!this.items.length) throw new Error('The items array is empty.');\n\t\tif (this.items.some((x) => !x)) throw new Error('The format of the array items is incorrect.');\n\n\t\tthis.totalPages = Math.ceil(this.items.length / this.itemsPerPage);\n\t\tthis.generatePages();\n\t\treturn this;\n\t}\n\n\tprivate generatePages() {\n\t\tconst template = this.embedTemplate instanceof MessageEmbed ? (this.embedTemplate.toJSON() as MessageEmbedOptions) : this.embedTemplate;\n\t\tfor (let i = 0; i < this.totalPages; i++) {\n\t\t\tconst clonedTemplate = new MessageEmbed(template);\n\t\t\tconst fieldsClone = this.embedTemplate.fields;\n\t\t\tclonedTemplate.fields = [];\n\n\t\t\tif (!clonedTemplate.color) clonedTemplate.setColor('RANDOM');\n\n\t\t\tconst data = this.paginateArray(this.items, i, this.itemsPerPage);\n\t\t\tthis.addPage({\n\t\t\t\tembeds: [clonedTemplate.addField(this.fieldTitle, data.join('\\n'), false).addFields(fieldsClone)]\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate paginateArray(items: T[], currentPage: number, perPageItems: number) {\n\t\tconst offset = currentPage * perPageItems;\n\t\treturn items.slice(offset, offset + perPageItems);\n\t}\n}\n","import { isNullish, Nullish } from '@sapphire/utilities';\nimport { Permissions } from 'discord.js';\nimport { isDMChannel, isGuildBasedChannel } from './type-guards';\nimport type { ChannelTypes } from './utility-types';\n\nconst canReadMessagesPermissions = new Permissions(['VIEW_CHANNEL']);\n\n/**\n * Determines whether or not we can send messages in a given channel.\n * @param channel The channel to test the permissions from.\n * @returns Whether or not we can send messages in the specified channel.\n */\nexport function canReadMessages(channel: ChannelTypes | Nullish): boolean {\n\tif (isNullish(channel)) return false;\n\tif (isDMChannel(channel)) return true;\n\n\treturn canDoUtility(channel, canReadMessagesPermissions);\n}\n\nconst canSendMessagesPermissions = new Permissions([canReadMessagesPermissions, 'SEND_MESSAGES']);\n\n/**\n * Determines whether or not we can send messages in a given channel.\n * @param channel The channel to test the permissions from.\n * @returns Whether or not we can send messages in the specified channel.\n */\nexport function canSendMessages(channel: ChannelTypes | Nullish): boolean {\n\tif (isNullish(channel)) return false;\n\tif (isDMChannel(channel)) return true;\n\tif (channel.isThread() && !channel.sendable) return false;\n\n\treturn canDoUtility(channel, canSendMessagesPermissions);\n}\n\nconst canSendEmbedsPermissions = new Permissions([canSendMessagesPermissions, 'EMBED_LINKS']);\n\n/**\n * Determines whether or not we can send embeds in a given channel.\n * @param channel The channel to test the permissions from.\n * @returns Whether or not we can send embeds in the specified channel.\n */\nexport function canSendEmbeds(channel: ChannelTypes | Nullish): boolean {\n\tif (isNullish(channel)) return false;\n\tif (isDMChannel(channel)) return true;\n\tif (channel.isThread() && !channel.sendable) return false;\n\n\treturn canDoUtility(channel, canSendEmbedsPermissions);\n}\n\nconst canSendAttachmentsPermissions = new Permissions([canSendMessagesPermissions, 'ATTACH_FILES']);\n\n/**\n * Determines whether or not we can send attachments in a given channel.\n * @param channel The channel to test the permissions from.\n * @returns Whether or not we can send attachments in the specified channel.\n */\nexport function canSendAttachments(channel: ChannelTypes | Nullish): boolean {\n\tif (isNullish(channel)) return false;\n\tif (isDMChannel(channel)) return true;\n\tif (channel.isThread() && !channel.sendable) return false;\n\n\treturn canDoUtility(channel, canSendAttachmentsPermissions);\n}\n\nconst canReactPermissions = new Permissions([canSendMessagesPermissions, 'READ_MESSAGE_HISTORY', 'ADD_REACTIONS']);\n\n/**\n * Determines whether or not we can send react to messages in a given channel.\n * @param channel The channel to test the permissions from.\n * @returns Whether or not we can react to messages in the specified channel.\n */\nexport function canReact(channel: ChannelTypes | Nullish) {\n\tif (isNullish(channel)) return false;\n\tif (isDMChannel(channel)) return true;\n\tif (channel.isThread() && channel.archived) return false;\n\n\treturn canDoUtility(channel, canReactPermissions);\n}\n\nconst canRemoveAllReactionsPermissions = new Permissions([canReadMessagesPermissions, 'READ_MESSAGE_HISTORY', 'MANAGE_MESSAGES']);\n\n/**\n * Determines whether or not we can remove reactions from messages in a given channel.\n * @param channel The channel to test the permissions from.\n * @returns Whether or not we can remove reactions from messages in the specified channel.\n */\nexport function canRemoveAllReactions(channel: ChannelTypes | Nullish) {\n\tif (isNullish(channel)) return false;\n\tif (isDMChannel(channel)) return false;\n\n\treturn canDoUtility(channel, canRemoveAllReactionsPermissions);\n}\n\nfunction canDoUtility(channel: ChannelTypes, permissionsToPass: Permissions) {\n\treturn isGuildBasedChannel(channel) ? channel.permissionsFor(channel.guild.me!)!.has(permissionsToPass) : true;\n}\n"],"names":["isNullish","MessagePayload","isFunction","MessageEmbed","Permissions"],"mappings":"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"}