import { Message, MessageEmbed, MessagePayload } from 'discord.js';
import { MessageBuilder } from '../builders/MessageBuilder';
import { PaginatedMessage } from './PaginatedMessage';
/**
 * This is a LazyPaginatedMessage. Instead of resolving all pages that are functions on {@link PaginatedMessage.run} will resolve when requested.
 */
export declare class LazyPaginatedMessage extends PaginatedMessage {
    /**
     * Only resolves the page corresponding with the handler's current index.
     */
    resolvePagesOnRun(channel: Message['channel']): Promise<void>;
    /**
     * Resolves the page corresponding with the given index. This also resolves the index's before and after the given index.
     * @param index The index to resolve. Defaults to handler's current index.
     */
    resolvePage(channel: Message['channel'], index: number): Promise<MessagePayload>;
    addPageBuilder(builder: MessageBuilder | ((builder: MessageBuilder) => MessageBuilder)): this;
    addPageContent(content: string): this;
    addPageEmbed(embed: MessageEmbed | ((builder: MessageEmbed) => MessageEmbed)): this;
    addPageEmbeds(embeds: MessageEmbed[] | ((embed1: MessageEmbed, embed2: MessageEmbed, embed3: MessageEmbed, embed4: MessageEmbed, embed5: MessageEmbed, embed6: MessageEmbed, embed7: MessageEmbed, embed8: MessageEmbed, embed9: MessageEmbed, embed10: MessageEmbed) => MessageEmbed[])): this;
}
//# sourceMappingURL=LazyPaginatedMessage.d.ts.map